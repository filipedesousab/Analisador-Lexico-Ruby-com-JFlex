/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package dlince;
import java_cup.runtime.*;
/**
* This class is a simple example lexer.
*/

public class Analisador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\12\1\13\1\1\22\0\1\3\1\20\1\102"+
    "\1\15\1\40\1\30\1\47\1\0\1\35\1\36\1\26\1\24\1\42"+
    "\1\25\1\23\1\27\1\17\11\17\1\44\1\41\1\50\1\4\1\51"+
    "\1\21\1\37\1\16\1\55\1\16\1\67\1\56\1\100\1\57\1\16"+
    "\1\60\2\16\1\101\1\16\1\61\14\16\1\31\1\103\1\32\1\45"+
    "\1\22\1\0\1\52\1\5\1\64\1\14\1\6\1\65\1\7\1\76"+
    "\1\10\1\16\1\63\1\53\1\71\1\11\1\66\1\75\1\16\1\62"+
    "\1\54\1\73\1\70\1\16\1\77\1\72\1\74\1\16\1\33\1\43"+
    "\1\34\1\46\6\0\1\12\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\5\4\1\5\1\4\1\1"+
    "\1\6\1\7\1\10\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\15\4\1\40\1\41\1\42\1\41"+
    "\1\43\1\0\1\4\1\44\3\4\1\45\1\46\4\4"+
    "\1\47\1\2\2\0\1\50\14\4\1\51\6\4\1\52"+
    "\1\53\1\54\1\55\1\56\1\0\2\4\1\57\3\4"+
    "\1\60\1\61\1\62\1\63\2\0\1\6\2\4\1\64"+
    "\4\4\1\65\6\4\1\66\11\4\1\0\3\4\1\67"+
    "\1\4\1\70\1\4\1\0\1\63\3\4\1\71\2\4"+
    "\1\72\3\4\1\73\6\4\1\74\1\75\1\4\1\76"+
    "\1\4\1\0\1\77\1\100\1\4\1\101\1\4\1\63"+
    "\2\4\1\102\1\103\1\104\1\4\1\105\1\4\1\106"+
    "\1\107\1\110\1\4\1\111\1\4\1\112\1\113\1\0"+
    "\1\114\3\4\1\115\1\116\1\117\1\120\1\0\3\4"+
    "\1\0\1\121\1\122\1\123\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\314\0\u02ec\0\u0330\0\u0374"+
    "\0\314\0\314\0\u03b8\0\u03fc\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\314"+
    "\0\u07b4\0\314\0\u07f8\0\314\0\u083c\0\u0880\0\314\0\u08c4"+
    "\0\u0908\0\u094c\0\u0220\0\u0220\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0220\0\u0330\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0220\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u07b4\0\314\0\314\0\314\0\314\0\u1034\0\u1078\0\u10bc"+
    "\0\u0220\0\u1100\0\u1144\0\u1188\0\u0220\0\u0220\0\u11cc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u0220\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u0220\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u0220\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u0220"+
    "\0\u19c4\0\u0220\0\u1a08\0\u1a4c\0\u1254\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u0220\0\u1b5c\0\u1ba0\0\u0220\0\u1be4\0\u1c28\0\u1c6c\0\u0220"+
    "\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u0220\0\u0220"+
    "\0\u1e48\0\u0220\0\u1e8c\0\u1ed0\0\u0220\0\u0220\0\u1f14\0\u0220"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u0220\0\u0220\0\u0220\0\u2068"+
    "\0\u0220\0\u20ac\0\u0220\0\u0220\0\u0220\0\u20f0\0\u0220\0\u2134"+
    "\0\u0220\0\u0220\0\u2178\0\u0220\0\u21bc\0\u2200\0\u2244\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\314\0\u0220\0\u0220\0\u23dc\0\u2178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\6\1\16\1\17\1\12\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\12\1\54\1\55\1\56\3\12\1\57"+
    "\1\12\1\60\1\61\1\62\1\12\1\63\1\64\1\12"+
    "\1\65\1\66\2\12\1\67\2\12\1\70\1\4\1\71"+
    "\2\15\77\71\1\72\1\73\1\4\2\15\7\4\2\15"+
    "\66\4\1\74\1\4\106\0\1\6\106\0\1\75\103\0"+
    "\1\12\1\76\3\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\10\12\1\100\17\12\7\0\4\12\1\101"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\1\12"+
    "\1\102\26\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\30\12\7\0\4\12\1\103\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\13\12\1\104"+
    "\14\12\7\0\1\12\1\105\1\12\1\106\1\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\14\12\1\107"+
    "\13\12\7\0\1\12\1\110\3\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\14\12\1\111\13\12\2\0"+
    "\1\112\2\0\7\112\2\0\70\112\6\0\1\113\10\0"+
    "\1\20\2\0\1\114\1\115\32\0\1\113\32\0\5\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\116\27\0\30\12"+
    "\21\0\1\115\71\0\4\12\1\117\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\1\12\1\120\26\12\7\0"+
    "\1\12\1\121\3\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\16\12\1\122\11\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\4\12\1\123"+
    "\23\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\7\12\1\124\20\12\7\0\1\12\1\125"+
    "\3\12\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\30\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\1\126\1\127\26\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\130\13\12"+
    "\1\131\13\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\10\12\1\132\17\12\7\0\4\12"+
    "\1\133\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\30\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\14\12\1\134\13\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\10\12\1\135"+
    "\13\12\1\136\3\12\7\0\3\12\1\137\1\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\30\12\7\0"+
    "\5\12\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\24\12\1\140\3\12\2\0\1\141\2\0\77\141\13\0"+
    "\1\142\50\0\1\143\10\0\1\144\6\0\1\145\7\0"+
    "\1\146\102\0\2\12\1\147\2\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\1\12\1\150"+
    "\3\12\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\30\12\7\0\5\12\2\0\1\151\1\0\2\12\2\77"+
    "\1\12\27\0\2\12\1\152\25\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\2\12\1\153"+
    "\25\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\20\12\1\154\7\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\12\1\155"+
    "\26\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\21\12\1\156\6\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\13\12\1\157"+
    "\14\12\21\0\1\160\3\0\1\161\2\162\75\0\1\163"+
    "\72\0\1\113\10\0\1\115\36\0\1\113\32\0\5\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\26\12"+
    "\1\164\1\165\7\0\5\12\2\0\1\166\1\0\2\12"+
    "\2\77\1\12\27\0\30\12\7\0\3\12\1\167\1\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\30\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\1\12\1\170\26\12\7\0\5\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\23\12\1\171\4\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\5\12\1\172\22\12\7\0\5\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\15\12\1\173\12\12"+
    "\7\0\5\12\2\0\1\174\1\0\2\12\2\77\1\12"+
    "\27\0\2\12\1\175\16\12\1\176\6\12\7\0\5\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\2\12"+
    "\1\177\25\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\1\200\27\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\12\1\201"+
    "\26\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\10\12\1\202\17\12\7\0\5\12\2\0"+
    "\1\203\1\0\2\12\2\77\1\12\27\0\1\12\1\204"+
    "\17\12\1\205\6\12\7\0\5\12\2\0\1\206\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\16\12\1\207"+
    "\11\12\7\0\1\12\1\210\3\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\1\12\1\211"+
    "\3\12\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\30\12\7\0\1\12\1\212\1\12\1\213\1\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\30\12\11\0"+
    "\1\214\101\0\3\12\1\215\1\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\216\27\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\16\12\1\217\11\12\7\0\1\12\1\220\1\12"+
    "\1\221\1\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\30\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\21\12\1\222\6\12\7\0\3\12"+
    "\1\223\1\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\30\12\21\0\1\160\2\0\1\224\1\225\77\0"+
    "\1\225\103\0\1\160\3\0\1\161\66\0\1\113\10\0"+
    "\1\163\2\0\1\114\33\0\1\113\32\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\6\12\1\226"+
    "\21\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\6\12\1\227\21\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\230\27\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\13\12\1\231\14\12\7\0\1\12\1\232\3\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\30\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\6\12\1\233\21\12\7\0\5\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\14\12\1\234\13\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\12\12\1\235\15\12\7\0\5\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\10\12\1\236\5\12"+
    "\1\237\11\12\7\0\1\12\1\240\3\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\30\12\7\0\5\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\2\12"+
    "\1\241\25\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\2\12\1\242\25\12\7\0\1\12"+
    "\1\243\3\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\30\12\7\0\1\12\1\244\3\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\30\12\7\0\3\12"+
    "\1\245\1\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\30\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\16\12\1\246\11\12\7\0\1\12"+
    "\1\247\3\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\30\12\7\0\4\12\1\250\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\12\1\251"+
    "\26\12\7\0\4\12\1\252\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\30\12\7\0\5\12\2\0\1\12"+
    "\1\0\2\12\2\77\1\12\27\0\1\12\1\253\26\12"+
    "\12\0\1\254\100\0\4\12\1\255\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\11\12\1\256"+
    "\16\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\10\12\1\257\17\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\13\12\1\260"+
    "\14\12\7\0\4\12\1\261\2\0\1\12\1\0\2\12"+
    "\2\77\1\12\27\0\30\12\21\0\1\262\71\0\5\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\27\12"+
    "\1\263\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\7\12\1\264\20\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\2\12\1\265"+
    "\25\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\10\12\1\266\17\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\7\12\1\267"+
    "\20\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\16\12\1\270\11\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\22\12\1\271"+
    "\5\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\10\12\1\272\17\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\2\12\1\273"+
    "\25\12\7\0\1\12\1\274\3\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\13\12\1\275"+
    "\14\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\2\12\1\276\25\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\1\12\1\277"+
    "\26\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\1\12\1\300\26\12\7\0\5\12\2\0"+
    "\1\301\1\0\2\12\2\77\1\12\27\0\30\12\7\0"+
    "\1\12\1\302\3\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\30\12\13\0\1\303\77\0\1\12\1\304"+
    "\3\12\2\0\1\12\1\0\2\12\2\77\1\12\27\0"+
    "\30\12\7\0\1\12\1\305\3\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\21\0\1\262\2\0"+
    "\1\224\66\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\12\27\0\4\12\1\306\23\12\7\0\5\12\2\0"+
    "\1\12\1\0\2\12\2\77\1\12\27\0\4\12\1\307"+
    "\23\12\7\0\1\12\1\310\3\12\2\0\1\12\1\0"+
    "\2\12\2\77\1\12\27\0\30\12\7\0\4\12\1\311"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\30\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\12"+
    "\27\0\2\12\1\312\25\12\7\0\1\12\1\313\3\12"+
    "\2\0\1\12\1\0\2\12\2\77\1\12\27\0\30\12"+
    "\2\0\4\303\1\314\5\303\2\0\70\303\5\0\5\12"+
    "\2\0\1\315\1\0\2\12\2\77\1\12\27\0\30\12"+
    "\7\0\5\12\2\0\1\12\1\0\2\12\2\77\1\316"+
    "\27\0\30\12\7\0\5\12\2\0\1\12\1\0\2\12"+
    "\2\77\1\317\27\0\30\12\2\0\4\303\1\314\1\303"+
    "\1\320\3\303\2\0\70\303\5\0\5\12\2\0\1\12"+
    "\1\0\2\12\1\77\1\321\1\12\27\0\30\12\7\0"+
    "\5\12\2\0\1\12\1\0\2\12\2\77\1\322\27\0"+
    "\30\12\7\0\5\12\2\0\1\12\1\0\2\12\2\77"+
    "\1\323\27\0\30\12\2\0\4\303\1\314\4\303\1\324"+
    "\2\0\74\303\1\314\5\303\2\0\1\325\67\303";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\6\1\1\11\3\1\2\11"+
    "\2\1\26\11\15\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\13\1\2\0\25\1\4\11\1\0"+
    "\12\1\2\0\31\1\1\0\7\1\1\0\27\1\1\0"+
    "\26\1\1\0\10\1\1\0\3\1\1\0\1\11\2\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
    	return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenRuby yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline + ", coluna " +yycolumn);
            }
          case 84: break;
          case 2: 
            { /* ignore */
            }
          case 85: break;
          case 3: 
            { new TokenRuby("EQ", yytext(), yyline, yycolumn);
            }
          case 86: break;
          case 4: 
            { new TokenRuby("IDENTIFI", yytext(), yyline, yycolumn);
            }
          case 87: break;
          case 5: 
            { throw new Error("Illegal character <" + yytext()+">");
            }
          case 88: break;
          case 6: 
            { new TokenRuby("INTEIRO", yytext(), yyline, yycolumn);
            }
          case 89: break;
          case 7: 
            { new TokenRuby("EXCLAMA", yytext(), yyline, yycolumn);
            }
          case 90: break;
          case 8: 
            { new TokenRuby("INTERROG", yytext(), yyline, yycolumn);
            }
          case 91: break;
          case 9: 
            { new TokenRuby("PONTO", yytext(), yyline, yycolumn);
            }
          case 92: break;
          case 10: 
            { new TokenRuby("PLUS", yytext(), yyline, yycolumn);
            }
          case 93: break;
          case 11: 
            { new TokenRuby("SUB", yytext(), yyline, yycolumn);
            }
          case 94: break;
          case 12: 
            { new TokenRuby("MULT", yytext(), yyline, yycolumn);
            }
          case 95: break;
          case 13: 
            { new TokenRuby("DIV", yytext(), yyline, yycolumn);
            }
          case 96: break;
          case 14: 
            { new TokenRuby("MOD", yytext(), yyline, yycolumn);
            }
          case 97: break;
          case 15: 
            { new TokenRuby("COLCHETE", yytext(), yyline, yycolumn);
            }
          case 98: break;
          case 16: 
            { new TokenRuby("COLCHETE2", yytext(), yyline, yycolumn);
            }
          case 99: break;
          case 17: 
            { new TokenRuby("CHAVE", yytext(), yyline, yycolumn);
            }
          case 100: break;
          case 18: 
            { new TokenRuby("CHAVE2", yytext(), yyline, yycolumn);
            }
          case 101: break;
          case 19: 
            { new TokenRuby("PARENTESE", yytext(), yyline, yycolumn);
            }
          case 102: break;
          case 20: 
            { new TokenRuby("PARENTESE2", yytext(), yyline, yycolumn);
            }
          case 103: break;
          case 21: 
            { new TokenRuby("ARROBA", yytext(), yyline, yycolumn);
            }
          case 104: break;
          case 22: 
            { new TokenRuby("DOLAR", yytext(), yyline, yycolumn);
            }
          case 105: break;
          case 23: 
            { new TokenRuby("PONTOVIRG", yytext(), yyline, yycolumn);
            }
          case 106: break;
          case 24: 
            { new TokenRuby("VIRGULA", yytext(), yyline, yycolumn);
            }
          case 107: break;
          case 25: 
            { new TokenRuby("PIPE", yytext(), yyline, yycolumn);
            }
          case 108: break;
          case 26: 
            { new TokenRuby("DOISPONTOS", yytext(), yyline, yycolumn);
            }
          case 109: break;
          case 27: 
            { new TokenRuby("CICONF", yytext(), yyline, yycolumn);
            }
          case 110: break;
          case 28: 
            { new TokenRuby("TIL", yytext(), yyline, yycolumn);
            }
          case 111: break;
          case 29: 
            { new TokenRuby("ECOM", yytext(), yyline, yycolumn);
            }
          case 112: break;
          case 30: 
            { new TokenRuby("MENOR", yytext(), yyline, yycolumn);
            }
          case 113: break;
          case 31: 
            { new TokenRuby("MAIOR", yytext(), yyline, yycolumn);
            }
          case 114: break;
          case 32: 
            { string.setLength(0); yybegin(STRING);
            }
          case 115: break;
          case 33: 
            { string.append( yytext() ); yybegin(CHAR);
            }
          case 116: break;
          case 34: 
            { new TokenRuby("STRING", string.toString(), yyline, yycolumn); 
                              yybegin(YYINITIAL);
            }
          case 117: break;
          case 35: 
            { new TokenRuby("CHAR", string.toString(), yyline, yycolumn);
                              yybegin(YYINITIAL);
            }
          case 118: break;
          case 36: 
            { new TokenRuby("IDENTIFIER_METODO", yytext(), yyline, yycolumn);
            }
          case 119: break;
          case 37: 
            { new TokenRuby("IN", yytext(), yyline, yycolumn);
            }
          case 120: break;
          case 38: 
            { new TokenRuby("IF", yytext(), yyline, yycolumn);
            }
          case 121: break;
          case 39: 
            { new TokenRuby("DO", yytext(), yyline, yycolumn);
            }
          case 122: break;
          case 40: 
            { new TokenRuby("DECIMAL", yytext(), yyline, yycolumn);
            }
          case 123: break;
          case 41: 
            { new TokenRuby("OR", yytext(), yyline, yycolumn);
            }
          case 124: break;
          case 42: 
            { string.append( yytext() );
            }
          case 125: break;
          case 43: 
            { string.append('\n');
            }
          case 126: break;
          case 44: 
            { string.append('\r');
            }
          case 127: break;
          case 45: 
            { string.append('\t');
            }
          case 128: break;
          case 46: 
            { string.append('\"');
            }
          case 129: break;
          case 47: 
            { new TokenRuby("END2", yytext(), yyline, yycolumn);
            }
          case 130: break;
          case 48: 
            { new TokenRuby("NIL", yytext(), yyline, yycolumn);
            }
          case 131: break;
          case 49: 
            { new TokenRuby("NOT", yytext(), yyline, yycolumn);
            }
          case 132: break;
          case 50: 
            { new TokenRuby("DEF", yytext(), yyline, yycolumn);
            }
          case 133: break;
          case 51: 
            { new TokenRuby("NOTACAO_SCIEN", yytext(), yyline, yycolumn);
            }
          case 134: break;
          case 52: 
            { new TokenRuby("AND", yytext(), yyline, yycolumn);
            }
          case 135: break;
          case 53: 
            { new TokenRuby("END", yytext(), yyline, yycolumn);
            }
          case 136: break;
          case 54: 
            { new TokenRuby("FOR", yytext(), yyline, yycolumn);
            }
          case 137: break;
          case 55: 
            { new TokenRuby("ELSE", yytext(), yyline, yycolumn);
            }
          case 138: break;
          case 56: 
            { new TokenRuby("NEXT", yytext(), yyline, yycolumn);
            }
          case 139: break;
          case 57: 
            { new TokenRuby("SELF", yytext(), yyline, yycolumn);
            }
          case 140: break;
          case 58: 
            { new TokenRuby("REDO", yytext(), yyline, yycolumn);
            }
          case 141: break;
          case 59: 
            { new TokenRuby("CASE", yytext(), yyline, yycolumn);
            }
          case 142: break;
          case 60: 
            { new TokenRuby("TRUE", yytext(), yyline, yycolumn);
            }
          case 143: break;
          case 61: 
            { new TokenRuby("THEN", yytext(), yyline, yycolumn);
            }
          case 144: break;
          case 62: 
            { new TokenRuby("WHEN", yytext(), yyline, yycolumn);
            }
          case 145: break;
          case 63: 
            { new TokenRuby("BEGIN2", yytext(), yyline, yycolumn);
            }
          case 146: break;
          case 64: 
            { new TokenRuby("BREAK", yytext(), yyline, yycolumn);
            }
          case 147: break;
          case 65: 
            { new TokenRuby("ELSIF", yytext(), yyline, yycolumn);
            }
          case 148: break;
          case 66: 
            { new TokenRuby("ALIAS", yytext(), yyline, yycolumn);
            }
          case 149: break;
          case 67: 
            { new TokenRuby("SUPER", yytext(), yyline, yycolumn);
            }
          case 150: break;
          case 68: 
            { new TokenRuby("BEGIN", yytext(), yyline, yycolumn);
            }
          case 151: break;
          case 69: 
            { new TokenRuby("RETRY", yytext(), yyline, yycolumn);
            }
          case 152: break;
          case 70: 
            { new TokenRuby("CLASS", yytext(), yyline, yycolumn);
            }
          case 153: break;
          case 71: 
            { new TokenRuby("FALSE", yytext(), yyline, yycolumn);
            }
          case 154: break;
          case 72: 
            { new TokenRuby("UNDEF", yytext(), yyline, yycolumn);
            }
          case 155: break;
          case 73: 
            { new TokenRuby("UNTIL", yytext(), yyline, yycolumn);
            }
          case 156: break;
          case 74: 
            { new TokenRuby("YIELD", yytext(), yyline, yycolumn);
            }
          case 157: break;
          case 75: 
            { new TokenRuby("WHILE", yytext(), yyline, yycolumn);
            }
          case 158: break;
          case 76: 
            { new TokenRuby("ENSURE", yytext(), yyline, yycolumn);
            }
          case 159: break;
          case 77: 
            { new TokenRuby("RESCUE", yytext(), yyline, yycolumn);
            }
          case 160: break;
          case 78: 
            { new TokenRuby("RETURN", yytext(), yyline, yycolumn);
            }
          case 161: break;
          case 79: 
            { new TokenRuby("UNLESS", yytext(), yyline, yycolumn);
            }
          case 162: break;
          case 80: 
            { new TokenRuby("MODULE", yytext(), yyline, yycolumn);
            }
          case 163: break;
          case 81: 
            { new TokenRuby("DEFINED?", yytext(), yyline, yycolumn);
            }
          case 164: break;
          case 82: 
            { new TokenRuby("__FILE__", yytext(), yyline, yycolumn);
            }
          case 165: break;
          case 83: 
            { new TokenRuby("__LINE__", yytext(), yyline, yycolumn);
            }
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
