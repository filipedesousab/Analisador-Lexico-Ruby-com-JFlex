/* The following code was generated by JFlex 1.6.1 */

package dlince;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/dlince/linguagem.lex</tt>
 */
public class Analisador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\100\1\101\1\1\22\0\1\3\1\6\1\77"+
    "\1\102\1\34\1\17\1\40\1\0\1\31\1\32\1\15\1\12\1\36"+
    "\1\14\1\11\1\16\12\5\1\37\1\35\1\23\1\13\1\24\1\7"+
    "\1\33\1\4\1\47\1\4\1\64\1\50\1\75\1\51\1\4\1\52"+
    "\2\4\1\76\1\4\1\53\14\4\1\25\1\103\1\26\1\21\1\10"+
    "\1\0\1\41\1\54\1\61\1\46\1\55\1\62\1\56\1\73\1\43"+
    "\1\4\1\60\1\42\1\66\1\45\1\63\1\72\1\4\1\57\1\44"+
    "\1\70\1\65\1\4\1\74\1\67\1\71\1\4\1\27\1\22\1\30"+
    "\1\20\6\0\1\100\u1fa2\0\1\100\1\100\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\22\3\1\37\1\1\1\40\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\1\0\1\46\1\3\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\2\3\1\71\1\72\6\3\1\73\13\3\1\74\6\3"+
    "\1\2\1\75\1\76\1\77\1\100\1\4\1\101\2\0"+
    "\2\3\1\102\1\0\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\3\1\111\2\3\1\112\1\3\1\5\1\113"+
    "\1\3\1\114\4\3\1\115\6\3\1\116\11\3\1\0"+
    "\1\101\2\3\1\0\1\3\1\117\1\3\1\120\5\3"+
    "\1\121\2\3\1\122\2\3\1\123\6\3\1\124\1\125"+
    "\2\3\1\126\1\101\2\3\1\0\1\127\1\130\1\3"+
    "\1\131\1\132\1\133\1\134\2\3\1\135\1\3\1\136"+
    "\1\137\1\3\1\140\1\141\1\3\1\142\1\143\2\3"+
    "\1\0\1\3\1\144\1\145\1\146\1\147\1\150\2\3"+
    "\1\0\1\3\1\151\1\152\1\0\1\153\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\314\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\314\0\u0440\0\u0484\0\u04c8\0\u050c\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\314\0\u0aa0\0\u0ae4"+
    "\0\314\0\u0b28\0\314\0\314\0\u0b6c\0\u0bb0\0\u0bf4\0\314"+
    "\0\u0c38\0\314\0\u0c7c\0\314\0\u0cc0\0\314\0\314\0\u0d04"+
    "\0\314\0\314\0\314\0\314\0\u0d48\0\u0d8c\0\u0dd0\0\314"+
    "\0\u0e14\0\314\0\314\0\u0e58\0\u0e9c\0\u0ee0\0\u0154\0\u0154"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u0154\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u0154\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u0aa0\0\314\0\314\0\314\0\314\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\314\0\u16d8\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\u171c\0\u0154\0\u1760\0\u17a4"+
    "\0\u0154\0\u17e8\0\u0154\0\u182c\0\u1870\0\u0154\0\u18b4\0\u18f8"+
    "\0\u193c\0\u1980\0\u0154\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u0154\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u15c8\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u0154\0\u1f14\0\u0154\0\u1f58\0\u1f9c\0\u1fe0\0\u2024"+
    "\0\u2068\0\u0154\0\u20ac\0\u20f0\0\u0154\0\u2134\0\u2178\0\u0154"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u0154\0\u0154"+
    "\0\u2354\0\u2398\0\u0154\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u0154"+
    "\0\u0154\0\u24ec\0\u0154\0\u0154\0\u0154\0\u0154\0\u2530\0\u2574"+
    "\0\u0154\0\u25b8\0\u0154\0\u0154\0\u25fc\0\u0154\0\u0154\0\u2640"+
    "\0\u0154\0\u0154\0\u2684\0\u26c8\0\u270c\0\u2750\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u2794\0\u27d8\0\u281c\0\u2860\0\u0154"+
    "\0\u0154\0\u28a4\0\314\0\u28e8\0\u270c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\7\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\3\7\1\53\1\54\1\7\1\55\1\7\1\56\1\57"+
    "\1\60\1\7\1\61\1\62\1\7\1\63\1\64\2\7"+
    "\1\65\2\7\1\66\1\0\1\6\1\67\1\4\1\70"+
    "\2\0\74\70\1\71\3\70\1\72\1\4\2\0\74\4"+
    "\1\73\2\0\2\4\106\0\1\6\105\0\2\7\2\74"+
    "\1\7\30\0\36\7\12\0\1\10\2\0\1\75\1\76"+
    "\36\0\1\77\4\0\1\77\41\0\1\100\74\0\2\7"+
    "\2\74\1\101\30\0\36\7\12\0\1\76\111\0\1\102"+
    "\103\0\1\103\4\0\1\104\33\0\1\105\42\0\1\106"+
    "\103\0\1\107\1\0\1\110\101\0\1\111\103\0\1\112"+
    "\103\0\1\113\103\0\1\114\6\0\1\115\74\0\1\116"+
    "\7\0\1\117\73\0\1\120\10\0\1\121\116\0\1\122"+
    "\57\0\1\123\24\0\1\124\47\0\2\7\2\74\1\7"+
    "\30\0\1\7\1\125\2\7\1\126\31\7\11\0\2\7"+
    "\2\74\1\7\30\0\4\7\1\127\14\7\1\130\14\7"+
    "\11\0\2\7\2\74\1\7\30\0\14\7\1\131\7\7"+
    "\1\132\11\7\11\0\2\7\2\74\1\7\30\0\2\7"+
    "\1\133\11\7\1\134\5\7\1\135\13\7\11\0\2\7"+
    "\2\74\1\7\30\0\14\7\1\136\5\7\1\137\13\7"+
    "\11\0\2\7\2\74\1\7\30\0\7\7\1\140\26\7"+
    "\11\0\2\7\2\74\1\7\30\0\12\7\1\141\23\7"+
    "\11\0\2\7\2\74\1\7\30\0\14\7\1\142\1\7"+
    "\1\143\17\7\11\0\2\7\2\74\1\7\30\0\1\7"+
    "\1\144\2\7\1\145\31\7\11\0\2\7\2\74\1\7"+
    "\30\0\14\7\1\146\21\7\11\0\2\7\2\74\1\7"+
    "\30\0\1\147\1\150\34\7\11\0\2\7\2\74\1\7"+
    "\30\0\1\151\21\7\1\152\13\7\11\0\2\7\2\74"+
    "\1\7\30\0\16\7\1\153\17\7\11\0\2\7\2\74"+
    "\1\7\30\0\4\7\1\154\31\7\11\0\2\7\2\74"+
    "\1\7\30\0\22\7\1\155\13\7\11\0\2\7\2\74"+
    "\1\7\30\0\16\7\1\156\13\7\1\157\3\7\11\0"+
    "\2\7\2\74\1\7\30\0\2\7\1\160\33\7\11\0"+
    "\2\7\2\74\1\7\30\0\32\7\1\161\3\7\5\0"+
    "\1\162\2\0\75\162\2\0\2\162\1\70\2\0\74\70"+
    "\1\0\3\70\46\0\1\163\11\0\1\164\10\0\1\165"+
    "\6\0\1\166\11\0\1\167\103\0\1\76\42\0\1\77"+
    "\4\0\1\77\33\0\1\170\3\0\1\171\1\172\1\0"+
    "\1\172\73\0\2\7\2\74\1\7\30\0\34\7\1\173"+
    "\1\174\20\0\1\175\145\0\1\176\41\0\1\177\103\0"+
    "\1\200\114\0\1\201\72\0\1\202\103\0\1\203\103\0"+
    "\1\204\74\0\2\7\2\74\1\7\30\0\2\7\1\205"+
    "\33\7\11\0\2\7\2\74\1\7\30\0\5\7\1\206"+
    "\30\7\11\0\2\7\2\74\1\7\30\0\1\7\1\207"+
    "\34\7\11\0\2\7\2\74\1\7\30\0\31\7\1\210"+
    "\4\7\11\0\2\7\2\74\1\7\30\0\1\7\1\211"+
    "\34\7\11\0\2\7\2\74\1\7\30\0\26\7\1\212"+
    "\7\7\11\0\2\7\2\74\1\7\30\0\27\7\1\213"+
    "\6\7\11\0\2\7\2\74\1\7\30\0\21\7\1\214"+
    "\14\7\11\0\2\7\2\74\1\7\30\0\10\7\1\215"+
    "\25\7\11\0\2\7\2\74\1\7\30\0\23\7\1\216"+
    "\12\7\11\0\2\7\2\74\1\7\30\0\15\7\1\217"+
    "\20\7\11\0\2\7\2\74\1\7\30\0\14\7\1\220"+
    "\21\7\11\0\2\7\2\74\1\7\30\0\3\7\1\221"+
    "\32\7\11\0\2\7\2\74\1\7\30\0\3\7\1\222"+
    "\1\7\1\223\30\7\11\0\2\7\2\74\1\7\30\0"+
    "\3\7\1\224\1\7\1\225\21\7\1\226\6\7\11\0"+
    "\2\7\2\74\1\7\30\0\3\7\1\227\32\7\11\0"+
    "\2\7\2\74\1\7\30\0\1\230\35\7\11\0\2\7"+
    "\2\74\1\7\30\0\1\7\1\231\34\7\11\0\2\7"+
    "\2\74\1\7\30\0\16\7\1\232\17\7\11\0\2\7"+
    "\2\74\1\7\30\0\1\7\1\233\3\7\1\234\21\7"+
    "\1\235\6\7\11\0\2\7\2\74\1\7\30\0\5\7"+
    "\1\236\30\7\11\0\2\7\2\74\1\7\30\0\24\7"+
    "\1\237\11\7\11\0\2\7\2\74\1\7\30\0\14\7"+
    "\1\240\21\7\11\0\2\7\2\74\1\7\30\0\14\7"+
    "\1\241\21\7\11\0\2\7\2\74\1\7\30\0\2\7"+
    "\1\242\11\7\1\243\21\7\12\0\1\167\2\0\1\75"+
    "\37\0\1\77\4\0\1\77\33\0\1\170\2\0\1\244"+
    "\1\245\77\0\1\245\103\0\1\170\3\0\1\171\76\0"+
    "\2\7\2\74\1\7\30\0\11\7\1\246\24\7\11\0"+
    "\2\7\2\74\1\7\30\0\11\7\1\247\24\7\63\0"+
    "\1\250\31\0\2\7\2\74\1\7\30\0\1\251\35\7"+
    "\11\0\2\7\2\74\1\7\30\0\21\7\1\252\14\7"+
    "\11\0\2\7\2\74\1\7\30\0\14\7\1\253\21\7"+
    "\11\0\2\7\2\74\1\7\30\0\27\7\1\254\6\7"+
    "\11\0\2\7\2\74\1\7\30\0\2\7\1\255\33\7"+
    "\11\0\2\7\2\74\1\7\30\0\11\7\1\256\24\7"+
    "\11\0\2\7\2\74\1\7\30\0\2\7\1\257\33\7"+
    "\11\0\2\7\2\74\1\7\30\0\1\260\35\7\11\0"+
    "\2\7\2\74\1\7\30\0\2\7\1\261\11\7\1\262"+
    "\21\7\11\0\2\7\2\74\1\7\30\0\24\7\1\263"+
    "\11\7\11\0\2\7\2\74\1\7\30\0\20\7\1\264"+
    "\15\7\11\0\2\7\2\74\1\7\30\0\22\7\1\265"+
    "\13\7\11\0\2\7\2\74\1\7\30\0\16\7\1\266"+
    "\5\7\1\267\11\7\11\0\2\7\2\74\1\7\30\0"+
    "\14\7\1\270\21\7\11\0\2\7\2\74\1\7\30\0"+
    "\3\7\1\271\32\7\11\0\2\7\2\74\1\7\30\0"+
    "\3\7\1\272\32\7\11\0\2\7\2\74\1\7\30\0"+
    "\14\7\1\273\21\7\11\0\2\7\2\74\1\7\30\0"+
    "\14\7\1\274\21\7\11\0\2\7\2\74\1\7\30\0"+
    "\2\7\1\275\33\7\11\0\2\7\2\74\1\7\30\0"+
    "\24\7\1\276\11\7\11\0\2\7\2\74\1\7\30\0"+
    "\14\7\1\277\21\7\11\0\2\7\2\74\1\7\30\0"+
    "\4\7\1\300\31\7\11\0\2\7\2\74\1\7\30\0"+
    "\1\7\1\301\34\7\11\0\2\7\2\74\1\7\30\0"+
    "\1\7\1\302\34\7\11\0\2\7\2\74\1\7\30\0"+
    "\4\7\1\303\31\7\12\0\1\304\102\0\2\7\2\74"+
    "\1\7\30\0\35\7\1\305\11\0\2\7\2\74\1\7"+
    "\30\0\12\7\1\306\23\7\50\0\1\307\44\0\2\7"+
    "\2\74\1\7\30\0\3\7\1\310\32\7\11\0\2\7"+
    "\2\74\1\7\30\0\16\7\1\311\17\7\11\0\2\7"+
    "\2\74\1\7\30\0\4\7\1\312\31\7\11\0\2\7"+
    "\2\74\1\7\30\0\12\7\1\313\23\7\11\0\2\7"+
    "\2\74\1\7\30\0\4\7\1\314\31\7\11\0\2\7"+
    "\2\74\1\7\30\0\17\7\1\315\16\7\11\0\2\7"+
    "\2\74\1\7\30\0\21\7\1\316\14\7\11\0\2\7"+
    "\2\74\1\7\30\0\16\7\1\317\17\7\11\0\2\7"+
    "\2\74\1\7\30\0\24\7\1\320\11\7\11\0\2\7"+
    "\2\74\1\7\30\0\30\7\1\321\5\7\11\0\2\7"+
    "\2\74\1\7\30\0\16\7\1\322\17\7\11\0\2\7"+
    "\2\74\1\7\30\0\3\7\1\323\32\7\11\0\2\7"+
    "\2\74\1\7\30\0\14\7\1\324\21\7\11\0\2\7"+
    "\2\74\1\7\30\0\3\7\1\325\32\7\11\0\2\7"+
    "\2\74\1\7\30\0\21\7\1\326\14\7\11\0\2\7"+
    "\2\74\1\7\30\0\1\7\1\327\34\7\11\0\2\7"+
    "\2\74\1\7\30\0\1\7\1\330\34\7\11\0\2\7"+
    "\2\74\1\7\30\0\5\7\1\331\30\7\11\0\2\7"+
    "\2\74\1\7\30\0\14\7\1\332\21\7\12\0\1\304"+
    "\2\0\1\244\77\0\2\7\2\74\1\7\30\0\7\7"+
    "\1\333\26\7\11\0\2\7\2\74\1\7\30\0\7\7"+
    "\1\334\26\7\52\0\1\335\42\0\2\7\2\74\1\7"+
    "\30\0\14\7\1\336\21\7\11\0\2\7\2\74\1\7"+
    "\30\0\14\7\1\337\21\7\11\0\2\7\2\74\1\7"+
    "\30\0\14\7\1\340\21\7\11\0\2\7\2\74\1\7"+
    "\30\0\4\7\1\341\31\7\11\0\2\7\2\74\1\7"+
    "\30\0\3\7\1\342\32\7\11\0\2\7\2\74\1\7"+
    "\30\0\14\7\1\343\21\7\11\0\2\7\2\74\1\344"+
    "\30\0\36\7\11\0\2\7\2\74\1\345\30\0\36\7"+
    "\5\0\13\335\1\346\64\335\2\0\2\335\4\0\2\7"+
    "\2\74\1\7\30\0\5\7\1\347\30\7\11\0\2\7"+
    "\2\74\1\350\30\0\36\7\11\0\2\7\2\74\1\351"+
    "\30\0\36\7\5\0\13\335\1\346\41\335\1\352\22\335"+
    "\2\0\2\335\4\0\2\7\1\74\1\353\1\7\30\0"+
    "\36\7\5\0\13\335\1\346\31\335\1\354\32\335\2\0"+
    "\15\335\1\346\32\335\1\355\31\335\2\0\2\335";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\1\11\10\1\1\11"+
    "\4\1\12\11\24\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\2\11\1\1\4\11\3\1\1\11\1\1\2\11"+
    "\37\1\4\11\2\1\2\0\2\1\1\11\1\0\6\11"+
    "\37\1\1\0\3\1\1\0\36\1\1\0\25\1\1\0"+
    "\10\1\1\0\3\1\1\0\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenRuby yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline + ", coluna " +yycolumn);
            }
          case 108: break;
          case 2: 
            { /* ignore */
            }
          case 109: break;
          case 3: 
            { return new TokenRuby("IDENTIFICADOR", yytext(), yyline, yycolumn);
            }
          case 110: break;
          case 4: 
            { return new TokenRuby("INTEIRO", yytext(), yyline, yycolumn);
            }
          case 111: break;
          case 5: 
            { return new TokenRuby("NOT", yytext(), yyline, yycolumn);
            }
          case 112: break;
          case 6: 
            { return new TokenRuby("INTERROG", yytext(), yyline, yycolumn);
            }
          case 113: break;
          case 7: 
            { return new TokenRuby("PONTO", yytext(), yyline, yycolumn);
            }
          case 114: break;
          case 8: 
            { return new TokenRuby("PLUS", yytext(), yyline, yycolumn);
            }
          case 115: break;
          case 9: 
            { return new TokenRuby("EQ", yytext(), yyline, yycolumn);
            }
          case 116: break;
          case 10: 
            { return new TokenRuby("SUB", yytext(), yyline, yycolumn);
            }
          case 117: break;
          case 11: 
            { return new TokenRuby("MULT", yytext(), yyline, yycolumn);
            }
          case 118: break;
          case 12: 
            { return new TokenRuby("DIV", yytext(), yyline, yycolumn);
            }
          case 119: break;
          case 13: 
            { return new TokenRuby("MOD", yytext(), yyline, yycolumn);
            }
          case 120: break;
          case 14: 
            { return new TokenRuby("BITCOMP", yytext(), yyline, yycolumn);
            }
          case 121: break;
          case 15: 
            { return new TokenRuby("BITXOR", yytext(), yyline, yycolumn);
            }
          case 122: break;
          case 16: 
            { return new TokenRuby("BITOR", yytext(), yyline, yycolumn);
            }
          case 123: break;
          case 17: 
            { return new TokenRuby("MENOR", yytext(), yyline, yycolumn);
            }
          case 124: break;
          case 18: 
            { return new TokenRuby("MAIOR", yytext(), yyline, yycolumn);
            }
          case 125: break;
          case 19: 
            { return new TokenRuby("COLCHETE", yytext(), yyline, yycolumn);
            }
          case 126: break;
          case 20: 
            { return new TokenRuby("COLCHETE2", yytext(), yyline, yycolumn);
            }
          case 127: break;
          case 21: 
            { return new TokenRuby("CHAVE", yytext(), yyline, yycolumn);
            }
          case 128: break;
          case 22: 
            { return new TokenRuby("CHAVE2", yytext(), yyline, yycolumn);
            }
          case 129: break;
          case 23: 
            { return new TokenRuby("PARENTESE", yytext(), yyline, yycolumn);
            }
          case 130: break;
          case 24: 
            { return new TokenRuby("PARENTESE2", yytext(), yyline, yycolumn);
            }
          case 131: break;
          case 25: 
            { return new TokenRuby("ARROBA", yytext(), yyline, yycolumn);
            }
          case 132: break;
          case 26: 
            { return new TokenRuby("DOLAR", yytext(), yyline, yycolumn);
            }
          case 133: break;
          case 27: 
            { return new TokenRuby("PONTOVIRG", yytext(), yyline, yycolumn);
            }
          case 134: break;
          case 28: 
            { return new TokenRuby("VIRGULA", yytext(), yyline, yycolumn);
            }
          case 135: break;
          case 29: 
            { return new TokenRuby("DOISPONTOS", yytext(), yyline, yycolumn);
            }
          case 136: break;
          case 30: 
            { return new TokenRuby("BITAND", yytext(), yyline, yycolumn);
            }
          case 137: break;
          case 31: 
            { string.setLength(0); yybegin(STRING);
            }
          case 138: break;
          case 32: 
            { string.append( yytext() );
            }
          case 139: break;
          case 33: 
            { new TokenRuby("STRING", string.toString(), yyline, yycolumn); 
                              yybegin(YYINITIAL);
            }
          case 140: break;
          case 34: 
            { string.append('\\');
            }
          case 141: break;
          case 35: 
            { new TokenRuby("CHAR", string.toString(), yyline, yycolumn);
                              yybegin(YYINITIAL);
            }
          case 142: break;
          case 36: 
            { return new TokenRuby("IDENTIFICADOR_METODO", yytext(), yyline, yycolumn);
            }
          case 143: break;
          case 37: 
            { return new TokenRuby("DECIMAL", yytext(), yyline, yycolumn);
            }
          case 144: break;
          case 38: 
            { return new TokenRuby("DIFERENTE", yytext(), yyline, yycolumn);
            }
          case 145: break;
          case 39: 
            { return new TokenRuby("PLUSEQ", yytext(), yyline, yycolumn);
            }
          case 146: break;
          case 40: 
            { return new TokenRuby("EQEQ", yytext(), yyline, yycolumn);
            }
          case 147: break;
          case 41: 
            { return new TokenRuby("CORRESP", yytext(), yyline, yycolumn);
            }
          case 148: break;
          case 42: 
            { return new TokenRuby("SUBEQ", yytext(), yyline, yycolumn);
            }
          case 149: break;
          case 43: 
            { return new TokenRuby("MULTEQ", yytext(), yyline, yycolumn);
            }
          case 150: break;
          case 44: 
            { return new TokenRuby("EXP", yytext(), yyline, yycolumn);
            }
          case 151: break;
          case 45: 
            { return new TokenRuby("DIVEQ", yytext(), yyline, yycolumn);
            }
          case 152: break;
          case 46: 
            { return new TokenRuby("MODEQ", yytext(), yyline, yycolumn);
            }
          case 153: break;
          case 47: 
            { return new TokenRuby("BITXOREQ", yytext(), yyline, yycolumn);
            }
          case 154: break;
          case 48: 
            { return new TokenRuby("OREQ", yytext(), yyline, yycolumn);
            }
          case 155: break;
          case 49: 
            { return new TokenRuby("ORBOOL", yytext(), yyline, yycolumn);
            }
          case 156: break;
          case 50: 
            { return new TokenRuby("MENOREQ", yytext(), yyline, yycolumn);
            }
          case 157: break;
          case 51: 
            { return new TokenRuby("SHIFTL", yytext(), yyline, yycolumn);
            }
          case 158: break;
          case 52: 
            { return new TokenRuby("MAIOREQ", yytext(), yyline, yycolumn);
            }
          case 159: break;
          case 53: 
            { return new TokenRuby("SHIFTR", yytext(), yyline, yycolumn);
            }
          case 160: break;
          case 54: 
            { return new TokenRuby("DOISPONTDUP", yytext(), yyline, yycolumn);
            }
          case 161: break;
          case 55: 
            { return new TokenRuby("BITANDEQ", yytext(), yyline, yycolumn);
            }
          case 162: break;
          case 56: 
            { return new TokenRuby("ANDBOOL", yytext(), yyline, yycolumn);
            }
          case 163: break;
          case 57: 
            { return new TokenRuby("IN", yytext(), yyline, yycolumn);
            }
          case 164: break;
          case 58: 
            { return new TokenRuby("IF", yytext(), yyline, yycolumn);
            }
          case 165: break;
          case 59: 
            { return new TokenRuby("DO", yytext(), yyline, yycolumn);
            }
          case 166: break;
          case 60: 
            { return new TokenRuby("OR", yytext(), yyline, yycolumn);
            }
          case 167: break;
          case 61: 
            { string.append('\n');
            }
          case 168: break;
          case 62: 
            { string.append('\r');
            }
          case 169: break;
          case 63: 
            { string.append('\t');
            }
          case 170: break;
          case 64: 
            { string.append('\"');
            }
          case 171: break;
          case 65: 
            { return new TokenRuby("NOTACAO_CIENTIFICA", yytext(), yyline, yycolumn);
            }
          case 172: break;
          case 66: 
            { return new TokenRuby("EQEQEQ", yytext(), yyline, yycolumn);
            }
          case 173: break;
          case 67: 
            { return new TokenRuby("EXPEQ", yytext(), yyline, yycolumn);
            }
          case 174: break;
          case 68: 
            { return new TokenRuby("ORBOOLEQ", yytext(), yyline, yycolumn);
            }
          case 175: break;
          case 69: 
            { return new TokenRuby("COMPCOMB", yytext(), yyline, yycolumn);
            }
          case 176: break;
          case 70: 
            { return new TokenRuby("SHIFTLEQ", yytext(), yyline, yycolumn);
            }
          case 177: break;
          case 71: 
            { return new TokenRuby("SHIFTREQ", yytext(), yyline, yycolumn);
            }
          case 178: break;
          case 72: 
            { return new TokenRuby("ANDBOOLEQ", yytext(), yyline, yycolumn);
            }
          case 179: break;
          case 73: 
            { return new TokenRuby("AND", yytext(), yyline, yycolumn);
            }
          case 180: break;
          case 74: 
            { return new TokenRuby("NIL", yytext(), yyline, yycolumn);
            }
          case 181: break;
          case 75: 
            { return new TokenRuby("DEF", yytext(), yyline, yycolumn);
            }
          case 182: break;
          case 76: 
            { return new TokenRuby("END", yytext(), yyline, yycolumn);
            }
          case 183: break;
          case 77: 
            { return new TokenRuby("END2", yytext(), yyline, yycolumn);
            }
          case 184: break;
          case 78: 
            { return new TokenRuby("FOR", yytext(), yyline, yycolumn);
            }
          case 185: break;
          case 79: 
            { return new TokenRuby("SELF", yytext(), yyline, yycolumn);
            }
          case 186: break;
          case 80: 
            { return new TokenRuby("NEXT", yytext(), yyline, yycolumn);
            }
          case 187: break;
          case 81: 
            { return new TokenRuby("ELSE", yytext(), yyline, yycolumn);
            }
          case 188: break;
          case 82: 
            { return new TokenRuby("REDO", yytext(), yyline, yycolumn);
            }
          case 189: break;
          case 83: 
            { return new TokenRuby("CASE", yytext(), yyline, yycolumn);
            }
          case 190: break;
          case 84: 
            { return new TokenRuby("TRUE", yytext(), yyline, yycolumn);
            }
          case 191: break;
          case 85: 
            { return new TokenRuby("THEN", yytext(), yyline, yycolumn);
            }
          case 192: break;
          case 86: 
            { return new TokenRuby("WHEN", yytext(), yyline, yycolumn);
            }
          case 193: break;
          case 87: 
            { return new TokenRuby("ALIAS", yytext(), yyline, yycolumn);
            }
          case 194: break;
          case 88: 
            { return new TokenRuby("SUPER", yytext(), yyline, yycolumn);
            }
          case 195: break;
          case 89: 
            { return new TokenRuby("BEGIN", yytext(), yyline, yycolumn);
            }
          case 196: break;
          case 90: 
            { return new TokenRuby("BEGIN2", yytext(), yyline, yycolumn);
            }
          case 197: break;
          case 91: 
            { return new TokenRuby("BREAK", yytext(), yyline, yycolumn);
            }
          case 198: break;
          case 92: 
            { return new TokenRuby("ELSIF", yytext(), yyline, yycolumn);
            }
          case 199: break;
          case 93: 
            { return new TokenRuby("RETRY", yytext(), yyline, yycolumn);
            }
          case 200: break;
          case 94: 
            { return new TokenRuby("CLASS", yytext(), yyline, yycolumn);
            }
          case 201: break;
          case 95: 
            { return new TokenRuby("FALSE", yytext(), yyline, yycolumn);
            }
          case 202: break;
          case 96: 
            { return new TokenRuby("UNDEF", yytext(), yyline, yycolumn);
            }
          case 203: break;
          case 97: 
            { return new TokenRuby("UNTIL", yytext(), yyline, yycolumn);
            }
          case 204: break;
          case 98: 
            { return new TokenRuby("YIELD", yytext(), yyline, yycolumn);
            }
          case 205: break;
          case 99: 
            { return new TokenRuby("WHILE", yytext(), yyline, yycolumn);
            }
          case 206: break;
          case 100: 
            { return new TokenRuby("ENSURE", yytext(), yyline, yycolumn);
            }
          case 207: break;
          case 101: 
            { return new TokenRuby("RESCUE", yytext(), yyline, yycolumn);
            }
          case 208: break;
          case 102: 
            { return new TokenRuby("RETURN", yytext(), yyline, yycolumn);
            }
          case 209: break;
          case 103: 
            { return new TokenRuby("UNLESS", yytext(), yyline, yycolumn);
            }
          case 210: break;
          case 104: 
            { return new TokenRuby("MODULE", yytext(), yyline, yycolumn);
            }
          case 211: break;
          case 105: 
            { return new TokenRuby("__FILE__", yytext(), yyline, yycolumn);
            }
          case 212: break;
          case 106: 
            { return new TokenRuby("__LINE__", yytext(), yyline, yycolumn);
            }
          case 213: break;
          case 107: 
            { return new TokenRuby("DEFINED?", yytext(), yyline, yycolumn);
            }
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
